// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using test2.Model;

#nullable disable

namespace test2.Migrations
{
    [DbContext(typeof(TourismDbContext))]
    [Migration("20250305013557_AddRelationships")]
    partial class AddRelationships
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("test2.Model.cities", b =>
                {
                    b.Property<int>("city_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("city_id"), 1L, 1);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("descreption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.HasKey("city_id");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("test2.Model.historical_places", b =>
                {
                    b.Property<int>("place_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("place_id"), 1L, 1);

                    b.Property<int>("citiescity_id")
                        .HasColumnType("int");

                    b.Property<int>("city_id")
                        .HasColumnType("int");

                    b.Property<string>("descreption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("entry_fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.HasKey("place_id");

                    b.HasIndex("citiescity_id");

                    b.ToTable("historical_places");
                });

            modelBuilder.Entity("test2.Model.hotelbookings", b =>
                {
                    b.Property<int>("booking_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("booking_id"), 1L, 1);

                    b.Property<DateTime>("bookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("booking_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<int>("hotel_id")
                        .HasColumnType("int");

                    b.Property<int>("hotelshotel_id")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("tripstrip_id")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("booking_id");

                    b.HasIndex("employeeId");

                    b.HasIndex("hotelshotel_id");

                    b.HasIndex("tripstrip_id");

                    b.ToTable("hotelbookings");
                });

            modelBuilder.Entity("test2.Model.hotels", b =>
                {
                    b.Property<int>("hotel_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("hotel_id"), 1L, 1);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("citiescity_id")
                        .HasColumnType("int");

                    b.Property<int>("city_id")
                        .HasColumnType("int");

                    b.Property<string>("descreption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("historical_placesplace_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("price_per_night")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("rating")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("hotel_id");

                    b.HasIndex("citiescity_id");

                    b.HasIndex("historical_placesplace_id");

                    b.ToTable("hotels");
                });

            modelBuilder.Entity("test2.Model.reviews", b =>
                {
                    b.Property<int>("review_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("review_id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("hotel_id")
                        .HasColumnType("int");

                    b.Property<int?>("hotelshotel_id")
                        .HasColumnType("int");

                    b.Property<double>("rating")
                        .HasColumnType("float");

                    b.Property<int>("trip_id")
                        .HasColumnType("int");

                    b.Property<int?>("tripstrip_id")
                        .HasColumnType("int");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("review_id");

                    b.HasIndex("hotelshotel_id");

                    b.HasIndex("tripstrip_id");

                    b.HasIndex("userId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("test2.Model.tripBookings", b =>
                {
                    b.Property<int>("booking_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("booking_id"), 1L, 1);

                    b.Property<DateTime>("booking_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("trip_id")
                        .HasColumnType("int");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("booking_id");

                    b.HasIndex("userId");

                    b.ToTable("tripBookings");
                });

            modelBuilder.Entity("test2.Model.trips", b =>
                {
                    b.Property<int>("trip_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("trip_id"), 1L, 1);

                    b.Property<int>("citiescity_id")
                        .HasColumnType("int");

                    b.Property<int>("city_id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<int?>("historical_placesplace_id")
                        .HasColumnType("int");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("trip_id");

                    b.HasIndex("citiescity_id");

                    b.HasIndex("historical_placesplace_id");

                    b.ToTable("trips");
                });

            modelBuilder.Entity("test2.Model.user", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Password")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("test2.Model.historical_places", b =>
                {
                    b.HasOne("test2.Model.cities", "cities")
                        .WithMany("historical_Places")
                        .HasForeignKey("citiescity_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cities");
                });

            modelBuilder.Entity("test2.Model.hotelbookings", b =>
                {
                    b.HasOne("test2.Model.user", "employee")
                        .WithMany("hotelbookings")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("test2.Model.hotels", "hotels")
                        .WithMany("hotelbookings")
                        .HasForeignKey("hotelshotel_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("test2.Model.trips", null)
                        .WithMany("hotelbookings")
                        .HasForeignKey("tripstrip_id");

                    b.Navigation("employee");

                    b.Navigation("hotels");
                });

            modelBuilder.Entity("test2.Model.hotels", b =>
                {
                    b.HasOne("test2.Model.cities", "cities")
                        .WithMany("hotels")
                        .HasForeignKey("citiescity_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("test2.Model.historical_places", null)
                        .WithMany("hotels")
                        .HasForeignKey("historical_placesplace_id");

                    b.Navigation("cities");
                });

            modelBuilder.Entity("test2.Model.reviews", b =>
                {
                    b.HasOne("test2.Model.hotels", null)
                        .WithMany("reviews")
                        .HasForeignKey("hotelshotel_id");

                    b.HasOne("test2.Model.trips", null)
                        .WithMany("reviews")
                        .HasForeignKey("tripstrip_id");

                    b.HasOne("test2.Model.user", null)
                        .WithMany("reviews")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("test2.Model.tripBookings", b =>
                {
                    b.HasOne("test2.Model.user", null)
                        .WithMany("tripBookings")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("test2.Model.trips", b =>
                {
                    b.HasOne("test2.Model.cities", "cities")
                        .WithMany("trips")
                        .HasForeignKey("citiescity_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("test2.Model.historical_places", null)
                        .WithMany("trips")
                        .HasForeignKey("historical_placesplace_id");

                    b.Navigation("cities");
                });

            modelBuilder.Entity("test2.Model.cities", b =>
                {
                    b.Navigation("historical_Places");

                    b.Navigation("hotels");

                    b.Navigation("trips");
                });

            modelBuilder.Entity("test2.Model.historical_places", b =>
                {
                    b.Navigation("hotels");

                    b.Navigation("trips");
                });

            modelBuilder.Entity("test2.Model.hotels", b =>
                {
                    b.Navigation("hotelbookings");

                    b.Navigation("reviews");
                });

            modelBuilder.Entity("test2.Model.trips", b =>
                {
                    b.Navigation("hotelbookings");

                    b.Navigation("reviews");
                });

            modelBuilder.Entity("test2.Model.user", b =>
                {
                    b.Navigation("hotelbookings");

                    b.Navigation("reviews");

                    b.Navigation("tripBookings");
                });
#pragma warning restore 612, 618
        }
    }
}
